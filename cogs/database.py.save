import discord
from discord import colour
from discord.ext import commands
import time
import random
import sqlite3
import requests
import traceback
import asyncio

con = sqlite3.connect(f'database.db')
cur = con.cursor()

admin = [0]
black = [0]
vip = [0]
users = [0]

class Database(commands.Cog, name = "봇 경제 명령어", description = "봇 경제 명령어"):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(
        name= "송금",
        aliases = ['ㅅㄱ']
    )
    async def givemoney(self, ctx, member: discord.Member, money: int):
        print('명령어 확인')
        no = 0
        try:
            if ctx.author.id in self.bot.owner_ids:
                userid = member.id
                print('아이디 확인')
                i = 0
                print('i값 0으로 설정')
                cur.execute(f'SELECT * FROM USERS WHERE id=\'{userid}\'')
                print('database에서 유저 아이디 검색')
                for row in cur:
                    print('database안에 유저 아이디가 있음을 확인')
                    user = row
                    print('user값을 row값으로 변경.')
                    i += 1
                if i == 0:
                    print('가입이 되지 않은 회원임을 확인.')
                    await ctx.send(f'<@{userid}> 님은 {self.bot.user.name} 서비스에 가입되어 있지 않습니다.')
                    print('안내 문구 전송. return None으로 코드 종료.')
                    return None
                randmoney = money
                print('randmoney값을 관리자가 입력한 money값으로 설정.')
                cur.execute(f'UPDATE USERS SET money={user[2] + randmoney} WHERE id=\'{user[0]}\'') #user에서 노란줄 뜨는건 무시 하셈
                print('randmoney원을 유저에게 지급 완료.')
                con.commit()
                print('database 저장 완료.')
                await ctx.send(f'<@{userid}> 님에게 {randmoney}원이 적립되었습니다!')
                print('안내 문구 출력 완료.')
                return None
        except:
            print('코드 실행중 에러 발생\n{}'.format(traceback.format_exc()))
            await ctx.send(traceback.format_exc())
            return None

    @commands.command(name = f'가입')
    async def data_join(self, ctx):
        try:

            # await ctx.send(f'{ctx.author.mention}, [약관](https://blog.teamsb.cf/pages/tos)을 동의하시려면 이 채널에 `동의` 를 입력해 주세요.\n동의하지 않으신다면 그냥 무시하세요.')
            embed = discord.Embed(
                title = '가입',
                description = '이용 약관을 동의하시려면 이 채널에 `동의` 를 입력해 주세요.\n이용 약관을 동의하지 않으신다면 이 메시지를 무시하세요.',
                colour = discord.Colour.green()
            )
            await ctx.send(f'{ctx.author.mention}', embed = embed)

            def check(m):
                return m.content == '동의' and m.author.id == ctx.author.id

            try:
                msg = await self.bot.wait_for('message', timeout=60.0, check=check)
            except asyncio.TimeoutError:
                await ctx.send(f"<a:no:754265096813019167> {ctx.author.mention}, 시간이 초과되어 자동 종료되었습니다.")
            else:
                if msg.content == "동의":
                    try:
                        cur.execute(f'INSERT INTO USERS VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', (str(ctx.author.id), str(ctx.author.name), 0, 0, 0, 0, 0, 0, random.randint(1, 4), 0, "None"))
                        con.commit()
                    except sqlite3.IntegrityError:
                        await ctx.send(f'{ctx.author.mention}님은 이미 가입된 유저입니다.')
                        con.commit()
                        return None
                    except sqlite3.OperationalError:
                        await ctx.send(f'{ctx.author.mention}님 가입 진행중 데이터베이스에 문제가 생겼습니다. \n계속해서 같은 오류가 뜬다면 Bainble0211#6109에게 문의해 주세요!\n에러 : ```python\n{traceback.format_exc()}\n```')
                        con.commit()
                        return None
                    await ctx.send(f'{ctx.author.mention}님의 가입을 성공하였습니다!')
                        # else:
                        #     await ctx.send(f'{ctx.author.mention} 다른 것을 입력하셨거나, 무시하셔서 취소되었습니다.')
                        #     return None
        except:
            await ctx.send(traceback.format_exc())

    @commands.command(name = f'구입')
    async def data_buy(self, ctx, *, args):
        if args == '' or args == ' ':
            await ctx.send(f'구입할 물건의 이름을 입력해 주세요!')
            return None
        i = 0
        cur.execute(f'SELECT * FROM USERS WHERE ID=\'{ctx.author.id}\'')
        for row in cur:
            user = row
            i += 1
        if i == 0:
            await ctx.send(f'{ctx.author.mention}님은 코인봇 데이터베이스에 존재하지 않는 유저입니다. 가입을 해주세요!')
            return None
        if args in ['커명', '커스텀명령어', '커스텀명령어티켓', '커명티켓']:
            if user[2] < 5000:
                await ctx.send(f'{ctx.author.mention}님이 보유하신 금액이 부족합니다.')
                return None
            cur.execute(f'UPDATE USERS SET money={user[2] - 5000}, customcommands={user[3] + 10} WHERE id=\'{user[0]}\'')
            con.commit()
            await ctx.send(f'{ctx.author.mention}님 커스텀명령어 티켓을 구매완료했습니다!\n커스텀명령어 티켓 사용은 `ㅋ커추 <명령어> <답변>` 으로 신청해 주시면 24시간 내에 생성됩니다!')
            return None
        if args in ['vip', 'VIP']:
            if user[2] < 100000:
                await ctx.send(f'{ctx.author.mention}님이 보유하신 금액이 부족합니다.')
                return None
            if user[4] != 0:
                await ctx.send(f'{ctx.author.mention}님은 이미 VIP입니다.')
                return None
            cur.execute(f'UPDATE USERS SET money={user[2] - 1000000}, vip={1} WHERE id=\'{user[0]}\'')
            con.commit()
            await ctx.send(f'{ctx.author.mention}님의 VIP권 구매를 완료했습니다!')
            return None
        else:
            await ctx.send(f'{args}은/는 아직 상점에 등록되지 않은 물건입니다.')
            return None

    @commands.command(name = f'인벤', aliases = ['인벤토리', '가방', '내가방'])
    async def data_inventory(self, ctx):
        i = 0
        cur.execute(f'SELECT * FROM USERS WHERE id=\'{ctx.author.id}\'')
        for row in cur:
            i += 1
            user2 = row
        if i == 0:
            await ctx.send(f'{ctx.author.mention}님은 코인 데이터베이스에 등록되어 있지 않습니다.')
            return None
        await ctx.send(f'{ctx.author.mention}님의 인벤토리\n\n보유한 돈: {user2[2]}\n커스텀명령어 티켓: {user2[3]}\nVIP권: {user2[4]}')

    @commands.command(name = f'지원금', aliases = ['ㅈㅇㄱ'])
    async def data_givemoney(self, ctx):
        i = 0
        cur.execute(f'SELECT * FROM USERS WHERE id=\'{ctx.author.id}\'')
        for row in cur:
            user = row
            i += 1
        if i == 0:
            await ctx.send(f'{ctx.author.mention}님은 코인봇 서비스에 가입되어 있지 않습니다.')
            return None
        if not int(user[9] + 3600 - time.time()) <= 0:
            await ctx.send(f'{int(user[9] + 3600 - time.time())}초 동안 쿨타임이 적용되어있습니다')
            return None
        randmoney = random.randint(1, 1000)
        cur.execute(f'UPDATE USERS SET money={user[2] + randmoney}, cooltime={time.time()} WHERE id=\'{user[0]}\'')
        con.commit()
        await ctx.send(f'{ctx.author.mention}님에게 {randmoney}원이 적립되었습니다!')

    @commands.command(name = '도박', aliases = ["ㄷㅂ"])
    async def data_gambling(self, ctx, money):
        try:
            date = cur.execute("SELECT * FROM USERS WHERE ID = ?", (str(ctx.author.id),)).fetchone()
            if not date:
                await ctx.send(f'{ctx.author.mention}님! 도박을 하기 전에 코인봇 서비스에 가입해 주세요!\n가입 명령어 : `>가입`')
                return None


            if int(money) > date[2]:
                await ctx.send('가진돈 보다 더 많은 돈으로는 도박할수 없어요!')
                return None
            if int(money) == 0:
                await ctx.send(f'0 보다 적은돈으로는 도박을 할수 없어요!')
                return None

            
            cur.execute(f'SELECT * FROM USERS WHERE id=\'{ctx.author.id}\'')
            for row in cur:
                user2 = row
            original_money = user2[2]
            
            embed = discord.Embed(
                    title = f'정말로 {money}원을 가지고 도박 하시겠습니까?',
                    colour = discord.Colour.green()
                )
            tg = await ctx.send(f'{ctx.author.mention}', embed=embed)
            await tg.add_reaction("⭕")
            await tg.add_reaction("❌")

            def check(reaction, user):
                return (user == ctx.author and str(reaction) in ["⭕", "❌"] and tg.id == reaction.message.id)
            reaction, user = await self.bot.wait_for("reaction_add", check=check)
                
            if str(reaction) == '⭕':
                random_value = random.randint(1, 3)
                on = 0
                getmoney = 0
                if random_value == 1 or random_value == 3:
                    on = 1
                    getmoney = int(money + money)
                else:
                    on = 2
                    getmoney = int(money) * -1

                ctx.send(f"{data}") # 유일하게 여기만 user에 노란줄이 없음 왜이럴까
                cur.execute("UPDATE USERS SET MONEY = ? WHERE id = ?",(original_money + getmoney,date[0]))
                #cur.execute("UPDATE USERS SET username = ? WHERE id = ?",(getmoney,date[0])) # 하셈
                    #cur.execute(f'UPDATE USERS SET MONEY = {user[2] + getmoney} WHERE id =\'{user[0]}\'') # 위에서는 user에서 노란줄이 뜨는데 여기만 안떠
                con.commit()

                if on == 1:
                    await ctx.send(f'{ctx.author.mention} 도박을 성공했어요! {getmoney} 원을 적립했어요!')
                    return None
                if on == 2:
                    await ctx.send(f'{ctx.author.mention} 도박을 실패했어요.... {getmoney}원을 코인봇이 가져갑니다.')
                    return None
            else:
                await ctx.send(f'{ctx.author.mention}, 도박을 취소했어요!')
                return None
        except:
            await ctx.send(traceback.format_exc())

def setup(bot):
    bot.add_cog(Database(bot))
